<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: uncurry | Tac say]]></title>
  <link href="http://ikarishinjieva.github.com/blog/blog/categories/uncurry/atom.xml" rel="self"/>
  <link href="http://ikarishinjieva.github.com/blog/"/>
  <updated>2014-02-22T10:59:17+08:00</updated>
  <id>http://ikarishinjieva.github.com/blog/</id>
  <author>
    <name><![CDATA[Tac Huang (ikari_shinji@github)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Q源码里uncurry函数分析]]></title>
    <link href="http://ikarishinjieva.github.com/blog/blog/2013/02/04/Q-uncurry-safe-meta-programming/"/>
    <updated>2013-02-04T23:04:00+08:00</updated>
    <id>http://ikarishinjieva.github.com/blog/blog/2013/02/04/Q-uncurry-safe-meta-programming</id>
    <content type="html"><![CDATA[<p><a href="http://documentup.com/kriskowal/q/">Q</a>里关于uncurry的代码
{% codeblock lang:js %}
// Attempt to make generics safe in the face of downstream
// modifications.
// There is no situation where this is necessary.
// If you need a security guarantee, these primordials need to be
// deeply frozen anyway, and if you don’t need a security guarantee,
// this is just plain paranoid.
// However, this does have the nice side-effect of reducing the size
// of the code by reducing x.call() to merely x(), eliminating many
// hard-to-minify characters.
// See Mark Miller’s explanation of what this does.
// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
var uncurryThis;
// I have kept both variations because the first is theoretically
// faster, if bind is available.
if (Function.prototype.bind) {</p>

<pre><code>var Function_bind = Function.prototype.bind;
uncurryThis = Function_bind.bind(Function_bind.call);
</code></pre>

<p>} else {</p>

<pre><code>uncurryThis = function (f) {
    return function () {
        return f.call.apply(f, arguments);
    };
};
</code></pre>

<p>}
var array_slice = uncurryThis(Array.prototype.slice);
{% endcodeblock %}</p>

<p>Uncurry/反柯西化的定义可参见<a href="http://en.wikipedia.org/wiki/Uncurry">wiki</a>，不是吾等凡人可以理解的。</p>

<p>从结果看，假设想调用[].slice，如果用uncurryThis(Array.prototype.slice)([])这种形式，可以防止其后[].slice被重写或者[].slice.call被重写。保证当前代码被保护起来，不受之后代码函数重写的影响。</p>

<p>对于Q里用到的这种形式，前提条件是Function.prototype.bind和Function.prototype.bind.call在之前不被重写。简单推导array_slice</p>

<p>{% codeblock array_slice推导 lang:js %}
array_slice = uncurryThis(Array.prototype.slice)
= Function.prototype.bind.bind(Function.prototype.bind.call)(Array.prototype.slice)
= Function.prototype.bind.call.bind(Array.prototype.slice) //Function.prototype.bind.call.bind is safe
= Array.prototype.slice.call //Array.prototype.slice.call is safe
//Array.prototype.slice is also safe
{% endcodeblock %}</p>

<p>不过，Q的注释里写的很清楚，uncurry在这里不是必要的... 写写而已...</p>

<p>一些参考：</p>

<p><a href="http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming">这篇文章</a> 详细介绍了safe meta programming，对uncurry做了定义和代码演示。</p>
]]></content>
  </entry>
  
</feed>
