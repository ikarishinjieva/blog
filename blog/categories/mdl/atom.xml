<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MDL | Tac say]]></title>
  <link href="http://ikarishinjieva.github.com/blog/blog/categories/mdl/atom.xml" rel="self"/>
  <link href="http://ikarishinjieva.github.com/blog/"/>
  <updated>2014-06-15T11:26:07+08:00</updated>
  <id>http://ikarishinjieva.github.com/blog/</id>
  <author>
    <name><![CDATA[Tac Huang (ikari_shinji@github)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MDL_map_partition中对锁的过渡]]></title>
    <link href="http://ikarishinjieva.github.com/blog/blog/2014/04/05/MDL_map_partition-lock-split/"/>
    <updated>2014-04-05T11:43:00+08:00</updated>
    <id>http://ikarishinjieva.github.com/blog/blog/2014/04/05/MDL_map_partition-lock-split</id>
    <content type="html"><![CDATA[<p>在<code>MDL</code>源码中有一段<code>MDL_map_partition</code>中对锁的过渡有点意思, 拿出来分析一下</p>

<h4>场景</h4>

<p><code>MDL_map_partition</code>是容纳<code>MDL_lock</code>的一个容器, <code>MDL_lock</code>可以简单的理解为一种锁.</p>

<p>那么场景问题是现在我要从锁容器<code>C</code>中查找一个锁<code>L</code>并加锁<code>L</code>, 怎样做到多线程安全</p>

<p>场景中<code>C</code>上有保护<code>C</code>的锁<code>A</code> (容器锁), <code>L</code>上的锁为<code>B</code> (成员锁) (此处做了简化, 实际上<code>MDL_lock</code>并不是一个锁, 而是类似于条件变量, 而锁<code>B</code>是保护<code>L</code>的锁. 此处将<code>L</code>简化为一把锁)</p>

<h4>分析1</h4>

<p>最简单的方法, 就是<code>A</code>加锁, <code>B</code>加锁, <code>A</code>解锁. 这种方法肯定不会有错, 但是并发性上会出现问题. 比如以下场景</p>

<ol>
<li>线程T1持有<code>B</code></li>
<li>线程T2正在容器中查找<code>B</code>.</li>
<li>线程T3在同一个容器中查找另外一个<code>MDL_lock</code></li>
</ol>


<p>T2先将<code>A</code>加锁, 加锁<code>B</code>时, 由于T1持有<code>B</code>, T2被阻塞; T3在同一个容器中查找另一个不相关的成员, 先要加锁<code>A</code>, <code>A</code>被T2持有, T3被阻塞</p>

<p>因此, 这种做法的并发性很差</p>

<h4>分析2</h4>

<p>提高并发性的关键是将<code>A</code>锁过渡到<code>B</code>锁, 比如这样: <code>A</code>加锁, 查找<code>B</code>, <code>A</code>解锁, <code>B</code>加锁.</p>

<p>这种方法解决了并发性, 但显而易见形成了一个无锁区 (从<code>A</code>解锁到<code>B</code>加锁这个区域). 如果在无锁区另一个线程将<code>B</code>销毁或移出容器, 那么后面的<code>B</code>加锁操作就会悲剧</p>

<h4>分析3</h4>

<p>面对无锁区的问题, 可以试着加<code>version</code>(版本变量)来解决, 规则如下:</p>

<ul>
<li>任何将成员移入/移出容器的情况, 都需要获得容器锁<code>A</code>和成员锁<code>B</code>, 并在元素<code>version</code>上加1</li>
<li>对成员的销毁, 需要先将成员移出容器</li>
</ul>


<p>这样, 查找成员的流程变为:</p>

<ol>
<li>线程T1, 对<code>A</code>加锁, 找到<code>B</code>, 记录<code>B</code>的<code>version</code>, 记为v1. 对<code>A</code>解锁</li>
<li>线程T2, <code>B</code>销毁或移出容器, 需要获得<code>A</code>和<code>B</code>锁, 对<code>version</code>加1, 记为v2</li>
<li>线程T1, 等到T2释放<code>B</code>锁后, 可获得<code>B</code>锁, 发现<code>v1 != v2</code>, 意味着成员可能在容器中已经被移出或销毁, 则需要重试整个过程</li>
</ol>


<p>加入<code>version</code>后, 对于销毁成员的场景, 并发性并没有改变 (因为仍然需要同时获得两把锁), 但对于查找成员的场景, 并发性和分析2一样</p>

<p>不幸的是, 这个场景仍然存在问题, 很容易看到其中一个逻辑问题, T1在T2销毁<code>B</code>锁后, 还获得了<code>B</code>锁. 也就是T2不能即刻销毁<code>B</code>锁, 否则所有等待<code>B</code>锁的线程都会悲剧. 那<code>B</code>锁何时能被安全销毁</p>

<h4>分析4</h4>

<p>要解决分析3的问题, 可以在<code>B</code>上添加引用计数, 细节如下:</p>

<ul>
<li>在成员未被移出容器时, 持有<code>A</code>锁可以对成员引用计数<code>usage_count</code>进行加1, 即在容器中查找成员时, 容器负责对成员的<code>usage_count</code>加1</li>
<li>持有<code>B</code>锁可以对自己的解引用计数<code>release_count</code>进行加1, 即使用者在使用完<code>B</code>后, 对<code>B</code>进行解引用</li>
<li>如果<code>usage_count</code> == <code>release_count</code>, 则<code>B</code>可以被安全销毁</li>
</ul>


<p>可以看到<code>usage_count</code>和<code>release_count</code>在分别在不同锁的保护下, 代入分析3的场景, 发现可以解决分析3的问题</p>

<p>还有一些需要说明的边界情况</p>

<ul>
<li>在成员已经被移出容器后, 成员引用计数<code>usage_count</code>不再受<code>A</code>锁保护, 而是受<code>B</code>锁保护. 相当于容器已经不再管理成员的引用计数</li>
<li>如何判断"成员已经被移出容器", 可以在成员上添加状态量<code>is_removed_from_container</code>, 读取此状态需要<code>A</code>锁或<code>B</code>锁, 修改此状态需要<code>A</code>锁和<code>B</code>锁.</li>
</ul>


<h4>Mysql的实现</h4>

<p>Mysql的实现和之前的分析大致相同, 给出映射表</p>

<table>
<thead>
<tr>
<th>分析里的概念 </th>
<th> Mysql的变量</th>
</tr>
</thead>
<tbody>
<tr>
<td>版本变量<code>version</code> </td>
<td> <code>MDL_lock.m_version</code></td>
</tr>
<tr>
<td>成员引用计数<code>usage_count</code> </td>
<td> <code>MDL_lock.m_ref_usage</code></td>
</tr>
<tr>
<td>成员解引用计数<code>release_count</code> </td>
<td> <code>MDL_lock.m_ref_release</code></td>
</tr>
<tr>
<td>状态量<code>is_removed_from_container</code> </td>
<td> <code>MDL_lock.m_is_destroyed</code></td>
</tr>
</tbody>
</table>


<p>实现锁拆分的函数为<code>MDL_map_partition::move_from_hash_to_lock_mutex</code>, 一看就懂</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[整理一下最近读的MDL源码]]></title>
    <link href="http://ikarishinjieva.github.com/blog/blog/2014/04/04/MDL/"/>
    <updated>2014-04-04T20:00:00+08:00</updated>
    <id>http://ikarishinjieva.github.com/blog/blog/2014/04/04/MDL</id>
    <content type="html"><![CDATA[<p>以下都是个人理解, 如有疏漏请斧正
另, 因为理解不深, 将忽略锁级别以及锁共享的细节</p>

<h2>MDL</h2>

<p>MDL (Metadata lock), 除了正常的Condition var提供的功能外, 还额外提供了
1. 不同的锁级别. 在不冲突的情况下, 允许共享资源
2. 死锁检查和处理
3. 记录等待状态, 是死锁检查的基础</p>

<h2>模型</h2>

<p><code>MDL_lock</code> 表示Mysqld中的一个资源(库/表/...) 存储在全局结构 <code>mdl_locks (MDL_map)</code>中, <code>mdl_locks</code>内有<code>m_partitions</code> (锁的分区), 用来分散查找lock时的竞争</p>

<p><code>MDL_context</code> 为MDL上下文接口, 表示一个资源竞争者, THD实现了这个接口, 即一个Mysqld的线程可以是<code>MDL_lock</code>的资源竞争者</p>

<p><code>MDL_ticket</code> 表示<code>MDL_lock</code>的许可或请求, 会同时挂在两处:</p>

<ol>
<li>挂在所属<code>MDL_Context</code>中, 通过<code>MDL_ticket.next_in_context/prev_in_context</code>组织链表</li>
<li>挂在<code>MDL_lock</code>的队列中, 通过<code>MDL_ticket.next_in_lock/prev_in_lock</code>组织链表. <code>MDL_lock</code>的队列分为两种, 一个<code>MDL_ticket</code>可能会挂在其中之一

<ul>
<li>挂在<code>MDL_lock</code>的等待队列(<code>MDL_lock.m_waiting</code>)中, 表示<code>MDL_ticket</code>的owner (<code>MDL_context</code>)正在等待该资源(<code>MDL_lock</code>)</li>
<li>挂在<code>MDL_lock</code>的已许可队列(<code>MDL_lock.m_granted</code>)中, 表示<code>MDL_ticket</code>的owner (<code>MDL_context</code>)已经获得该资源(<code>MDL_lock</code>)</li>
</ul>
</li>
</ol>


<p>总结一下, <code>MDL_context</code>和<code>MDL_ticket</code>的关系是一对多, 一个竞争者可以同时申请/获得多个资源的许可; <code>MDL_ticket</code>和<code>MDL_lock</code>的关系是多对一, 可以同时有多个资源许可在竞争一个资源, 或者多个资源许可可以<em>有条件</em>地共享一个资源</p>

<h2>如何获得锁</h2>

<p>简单分析<code>MDL_context::acquire_lock</code>方法, 其主要流程是</p>

<pre><code>bool MDL_context::acquire_lock(MDL_request *mdl_request, ulong lock_wait_timeout) {
    ...

    try_acquire_lock_impl(...) 
    //尝试不等待立刻获得资源, 如果成功直接返回
    //以下是等待资源的处理
    ...
    lock-&gt;m_waiting.add_ticket(ticket) 
    //将一个资源申请`ticket`挂入资源`lock`的等待队列`m_waiting`
    if (lock-&gt;needs_notification(ticket)) {
        //如果等待资源时需要通知状态, 则不断轮询并通知
        //将忽略此处的细节
        ...
    } else {
        //等待资源
        //结果可能是获得资源, 或者超时, 或者异常 (比如被死锁检测机制判定死亡)
        //`timed_wait`中的实现是等待COND(条件变量)`m_wait.m_COND_wait_status`
        wait_status= m_wait.timed_wait(...);
    }
    //收尾处理
    m_tickets[mdl_request-&gt;duration].push_front(ticket)
    //将资源申请`ticket`挂入`MDL_Context.m_tickets`
    ...
}
</code></pre>

<h3>记录等待状态</h3>

<p>之前提到了记录等待状态, 在<code>MDL_context::acquire_lock</code>方法中可以看到如下代码 (上一节未列出)</p>

<pre><code>bool MDL_context::acquire_lock(MDL_request *mdl_request, ulong lock_wait_timeout) {
    m_wait.reset_status();
    ...
    will_wait_for(ticket); //其中设置了`m_waiting_for`
    if (lock-&gt;needs_notification(ticket)) {
        ...
        //等待资源
        wait_status= m_wait.timed_wait(m_owner, &amp;abs_timeout, TRUE,
                                  mdl_request-&gt;key.get_wait_state_name());
    } else {
        //等待资源
        wait_status= m_wait.timed_wait(m_owner, &amp;abs_timeout, TRUE,
                                  mdl_request-&gt;key.get_wait_state_name());
    }
    done_waiting_for(); //其中清空了`m_waiting_for`
    ...
}
</code></pre>

<p>可以看到<code>MDL_context.m_wait</code>是用来等待资源的工具类, 其中进行等待处理, 并记录等待资源的状态/结果.</p>

<p>还有一个<code>MDL_context.m_waiting_for</code>也在记录<code>MDL_context</code>正在进行的资源申请(<code>MDL_ticket</code>), 其正在等待某个资源. 实际上<code>m_waiting_for</code>是冗余的信息, 至于原因源代码中有解释, 此处不冗余说明...</p>

<h2>如何释放锁</h2>

<p>释放锁, 需要完成下面几个动作:</p>

<ol>
<li>将<code>ticket</code>从<code>MDL_lock</code>的数据结构上卸下来</li>
<li>调度选择新的锁占有者</li>
<li>将<code>ticket</code>从<code>MDL_context</code>的数据结构上卸下并回收</li>
</ol>


<p>入口为<code>MDL_context::release_lock</code></p>

<pre><code>void MDL_context::release_lock(enum_mdl_duration duration, MDL_ticket *ticket) 
{
    ...
    lock-&gt;remove_ticket(&amp;MDL_lock::m_granted, ticket) {
        //将`ticket`从`MDL_lock`的数据结构上卸下来
        (this-&gt;*list).remove_ticket(ticket);
        ...
        //调度选择新的锁占有者
        reschedule_waiters();
    }()

    //将`ticket`从`MDL_context`的数据结构上卸下并回收
    m_tickets[duration].remove(ticket);
    MDL_ticket::destroy(ticket);
    ...
}
</code></pre>

<p>下面说明调度的细节</p>

<h3>释放锁时的调度</h3>

<p>调度函数的入口是<code>MDL_lock::reschedule_waiters</code></p>

<p>最简单的调度就是从<code>MDL_lock.m_waiting</code>队列中取出头元素, 直接将资源调度给头元素即可</p>

<p>Mysqld在此基础上添加了一个退让条件:
如果资源连续被<em>高优先级</em>(比如<code>SNW</code>/<code>SNRW</code>/<code>X</code>锁类型)的<code>ticket</code>获得, 那么退让一步, 允许资源间隔被调度给<em>低优先级</em>的<code>ticket</code>防止其饿死.</p>

<p>用<code>MDL_lock::reschedule_waiters</code>的代码说就是, 如果<code>MDL_lock</code>被连续分配给<code>hog_lock_types_bitmap()</code>中定义的<em>高优先级</em>类型的<code>ticket</code>,连续的次数<code>m_hog_lock_count</code>超过<code>max_write_lock_count</code>, 那么开启退让条件, 批准第一个<em>非</em><em>高优先级</em>的<code>ticket</code>获得资源</p>

<h2>死锁检测</h2>

<p>死锁检测的入口是<code>MDL_context::find_deadlock</code>, 本身原理很简单, 但源码写的很复杂= =. 先说明原理, 再对应源码</p>

<p>设当前<code>MDL_context</code>为图的一个节点<code>A</code>, 从节点<code>A</code>出发,  找到<code>A</code>的正在等待的资源<code>L</code>(<code>A.m_waiting_for.m_lock</code>)中的<code>m_granted</code>里的每一个<code>MDL_ticket</code>对应的<code>MDL_context</code> <code>B</code>, 表示<code>A</code>正在等待<code>B</code>释放资源<code>L</code>. 在图中<code>A</code> -> <code>B</code> 添加一条有向边</p>

<p>死锁检查的工作就是遍历这张有向图, 检查其是否存在环路</p>

<p>以<code>MDL_context::find_deadlock</code>入口, 展开一些调用来说明代码</p>

<pre><code>(MDL_context::find_deadlock)
while(1) {
    visit_subgraph(visitor) {
        m_waiting_for-&gt;accept_visitor(visitor) {
            m_lock-&gt;visit_subgraph(this, visitor) {
                ...
            }()
        }()
    }()
    break if no deadlock
    set deadlock victim
    break if deadlock victim is current context
}
</code></pre>

<p>可以看到<code>find_deadlock</code>以<code>MDL_context.m_waiting_for.m_lock</code>为起始点, 不断遍历其有向图, 选出victim. 直到
* 没有发现死锁
* 或自己被选为victim</p>

<p>其使用一个visitor (<code>MDL_wait_for_graph_visitor</code>) 贯穿遍历过程, 其记录了遍历的过程</p>

<p>再来看<code>MDL_lock::visit_subgraph</code>, 此函数是以一个<code>MDL_lock</code>为起点, 来遍历依赖图</p>

<pre><code>MDL_lock::visit_subgraph(MDL_ticket *waiting_ticket, MDL_wait_for_graph_visitor *gvisitor) {

    //此处是因为MDL_context.m_waiting_for是冗余信息, 但无法保证更新同步, 带来的额外操作. 忽略此处细节
    if (src_ctx-&gt;m_wait.get_status() != MDL_wait::EMPTY) {...}

    //visitor用来记录遍历层次
    //当遍历层次大于MAX_SEARCH_DEPTH(32), 也认为发现死锁
    if (gvisitor-&gt;enter_node(src_ctx)) {...}

    //由于现在是以一个资源(`MDL_lock`)为视角, 之后的检查为了效率, 遍历会从两个方向同时进行, 即检查节点的出度方向(`MDL_lock.m_granted`)和节点的入度方向(`MDL_lock.m_waiting`). 


    //为了效率, 死锁检测会先检测距离为1的临近节点, 而先不深度遍历图

    while ((ticket= granted_it++))
    {
      if (ticket-&gt;get_ctx() != src_ctx &amp;&amp;
          ticket-&gt;is_incompatible_when_granted(waiting_ticket-&gt;get_type()) &amp;&amp;
          gvisitor-&gt;inspect_edge(ticket-&gt;get_ctx()))
      {
        goto end_leave_node;
      }
    }

    while ((ticket= waiting_it++))
    {
      /* Filter out edges that point to the same node. */
      if (ticket-&gt;get_ctx() != src_ctx &amp;&amp;
          ticket-&gt;is_incompatible_when_waiting(waiting_ticket-&gt;get_type()) &amp;&amp;
          gvisitor-&gt;inspect_edge(ticket-&gt;get_ctx()))
      {
        goto end_leave_node;
      }
    }

    //此处开始, 深度遍历图

    granted_it.rewind();
    while ((ticket= granted_it++))
    {
      if (ticket-&gt;get_ctx() != src_ctx &amp;&amp;
          ticket-&gt;is_incompatible_when_granted(waiting_ticket-&gt;get_type()) &amp;&amp;
          ticket-&gt;get_ctx()-&gt;visit_subgraph(gvisitor))
      {
        goto end_leave_node;
      }
    }

    waiting_it.rewind();
    while ((ticket= waiting_it++))
    {
      if (ticket-&gt;get_ctx() != src_ctx &amp;&amp;
          ticket-&gt;is_incompatible_when_waiting(waiting_ticket-&gt;get_type()) &amp;&amp;
          ticket-&gt;get_ctx()-&gt;visit_subgraph(gvisitor))
      {
        goto end_leave_node;
      }
    }
    ...

    //visitor退栈
    gvisitor-&gt;leave_node(src_ctx);
    ...
}
</code></pre>

<p>发现死锁后, 会调用<code>Deadlock_detection_visitor::opt_change_victim_to</code>, 其中进行<code>MDL_context</code>权重比较, 来选取一个作为victim, 此处忽略细节</p>
]]></content>
  </entry>
  
</feed>
