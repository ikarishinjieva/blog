<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: memory_reordering | Tac say]]></title>
  <link href="http://ikarishinjieva.github.com/blog/blog/categories/memory-reordering/atom.xml" rel="self"/>
  <link href="http://ikarishinjieva.github.com/blog/"/>
  <updated>2013-11-11T21:29:11+08:00</updated>
  <id>http://ikarishinjieva.github.com/blog/</id>
  <author>
    <name><![CDATA[Tac Huang (ikari_shinji@github)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[对Memory Reordering Caught in the Act的学习 续 - 关于go的部分]]></title>
    <link href="http://ikarishinjieva.github.com/blog/blog/2013/11/11/study-memory-reorder-cont/"/>
    <updated>2013-11-11T20:44:00+08:00</updated>
    <id>http://ikarishinjieva.github.com/blog/blog/2013/11/11/study-memory-reorder-cont</id>
    <content type="html"><![CDATA[<p>这篇主要解决<a href="http://ikarishinjieva.github.io/blog/blog/2013/11/07/study-memory-reorder/">上一篇</a>遗留下来的问题，问题的简要描述请参看<a href="http://stackoverflow.com/questions/19901615/why-go-doesnt-show-memory-reordering">我发在SO上的帖子</a></p>

<p>主要的问题是用c++可以重现memory reordering，但go的程序没有重现</p>

<p>主要的结论是写go的时候我忘记设置GOMAXPROC，在目前这个go版本(1.2 rc2)下，不设置GOMAXPROC goroutine不会并发的，自然也没法设置memory reordering</p>

<p>此篇主要内容到此结束，以下是这两天的一些探索过程和技巧，觉得还是挺有意思的</p>

<hr />

<h4>go tool生成的汇编码和真实的汇编码是有很大差距的</h4>

<p>这个结论并不奇怪，但是差异的程度还是会影响诸如lock-free的代码的使用前提</p>

<p>对以下代码做对比</p>

<pre><code>x = 1
r1 = y
</code></pre>

<p>使用<code>go tool 6g -S xxx.go</code>反编译后的代码</p>

<pre><code>0246 (a.go:25) MOVQ    $1,x+0(SB)   //X=1
0247 (a.go:26) MOVQ    y+0(SB),BX
0248 (a.go:26) MOVQ    BX,r1+0(SB)  //r1=Y
</code></pre>

<p>而真实运行在cpu上的代码（<code>ndisasm -b 32 xxx</code>)为</p>

<pre><code>000013EB  C70425787F170001  mov dword [0x177f78],0x1     //X=1
         -000000
000013F6  48                dec eax
000013F7  8B1C25807F1700    mov ebx,[0x177f80]
000013FE  48                dec eax
000013FF  891C25687F1700    mov [0x177f68],ebx          //r1=Y
00001406  48                dec eax
</code></pre>

<p>可以看到在访问共享内存的前后多出了<code>dec eax</code>作为margin，这个原因不明，也没有找到相应的资料</p>

<p>但总的来说<code>ndisasm</code>产生的汇编代码更方便于对go行为的理解</p>

<hr />

<h4>一个小技巧快速定位汇编码</h4>

<p>我对intel指令集和go的编译器知之甚少，读起汇编码来颇为费劲。</p>

<p>快速定位源码对应的汇编码的位置，比较方便的就是修改一个数值，比如x=1改为x=2，前后生成的汇编码diff一下，就可以大概确定位置了</p>

<hr />

<h4>替换c++生成文件的指令</h4>

<p>在探索过程中，我想做个对比实验来证明是否上面所说的<code>dec eax</code>引起了c++和go在memory reordering上的差异，于是就想将<code>dec eax</code>也加到c++的生成文件中，这样就可以对比效果</p>

<p>碰到的问题是如果我直接将<code>asm volatile("dec %eax")</code>直接加到c++源码中，生成的汇编代码不是<code>48</code>，而是<code>FExxxx</code>。翻看<a href="http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-2a-manual.pdf">Intel® 64 and IA-32 Architectures
Software Developer’s Manual</a>，可知<code>dec</code>有多种形式</p>

<p>但是我不想研究为什么编译器会选择<code>FExxxx</code>而不是<code>48</code>，而是想尽快将c++生成的汇编代码形式做成和go一样。于是就有了下面的步骤：</p>

<ol>
<li><code>48</code>有两个字节，我也选取两个字节的op写在c++源码中，比如<code>asm volatile("cli")</code></li>
<li>c++编译生成，然后用16进制编辑器将<code>cli</code>生成的两个字节换成<code>48</code>即可</li>
</ol>


<p>之所以选择替换是因为怕有checksum或者内存位置的偏移，我也不知道有还是没有...</p>

<p>对比实验证明<code>dec eax</code>不是引起差异的原因</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对Memory Reordering Caught in the Act的学习]]></title>
    <link href="http://ikarishinjieva.github.com/blog/blog/2013/11/07/study-memory-reorder/"/>
    <updated>2013-11-07T21:40:00+08:00</updated>
    <id>http://ikarishinjieva.github.com/blog/blog/2013/11/07/study-memory-reorder</id>
    <content type="html"><![CDATA[<p>最近迷上了preshing.com，真的是非常专业的blog，每篇深浅合适而且可以相互印证，达到出书的质量了</p>

<p>学习了<a href="http://preshing.com/20120515/memory-reordering-caught-in-the-act/">Memory Reordering Caught in the Act</a>，内容很简单，主要是说“即使汇编码是顺序的，CPU执行时会对Load-Save进行乱序执行，导致无锁的两线程出现意料之外的结果”</p>

<p>简述一下：</p>

<ul>
<li>首先我们有两个线程，Ta和Tb，且有四个公共变量，a,b,r1,r2</li>
<li>Ta的代码是 a=1, r1=b</li>
<li>Tb的代码是 b=1, r2=a</li>
<li>保证编译器不做乱序优化</li>
<li>由于两个线程的读都在写之后，那么理论上，r1和r2中至少有一个应为1，或者都为1</li>
<li>但实际并非如此</li>
</ul>


<p>原因是CPU会做乱序执行，因为Ta/Tb的代码乱序后，比如r1=b, a=1，从单线程的角度来看对结果没有影响。而对于多线程，就会出现r1=r2=0的状况</p>

<p>解决方案是在两句之间插入Load-Save fence，参看<a href="http://preshing.com/20120710/memory-barriers-are-like-source-control-operations/">这里</a></p>

<p>我自己用go想重现这个场景，代码参看最后。但是奇怪的是go的编译码跟文章描述的差不多</p>

<pre><code>[thread 1]
...
MOVQ    $1,a+0(SB)
MOVQ    b+0(SB),BX
MOVQ    BX,r1+0(SB)

[thread 2]
MOVQ    $1,b+0(SB)
MOVQ    a+0(SB),BX
MOVQ    BX,r2+0(SB)
</code></pre>

<p>但是在MBP (Intel Core i7)上跑并没有出现CPU乱序的现象，希望有同学能帮我提供线索，谢谢</p>

<p>go 代码：</p>

<pre><code>package main

import (
    "fmt"
    "math/rand"
)

var x, y, r1, r2 int
var detected = 0

func randWait() {
    for rand.Intn(8) != 0 {
    }
}

func main() {
    beginSig1 := make(chan bool, 1)
    beginSig2 := make(chan bool, 1)
    endSig1 := make(chan bool, 1)
    endSig2 := make(chan bool, 1)
    go func() {
        for {
            &lt;-beginSig1
            randWait()
            x = 1
            r1 = y
            endSig1 &lt;- true
        }
    }()
    go func() {
        for {
            &lt;-beginSig2
            randWait()
            y = 1
            r2 = x
            endSig2 &lt;- true
        }
    }()
    for i := 1; ; i = i + 1 {
        x = 0
        y = 0
        beginSig1 &lt;- true
        beginSig2 &lt;- true
        &lt;-endSig1
        &lt;-endSig2
        if r1 == 0 &amp;&amp; r2 == 0 {
            detected = detected + 1
            fmt.Println(detected, "reorders detected after ", i, "iterations")
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
