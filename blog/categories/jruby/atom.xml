<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jruby | Tac say]]></title>
  <link href="http://ikarishinjieva.github.com/blog/blog/categories/jruby/atom.xml" rel="self"/>
  <link href="http://ikarishinjieva.github.com/blog/"/>
  <updated>2014-04-04T20:38:37+08:00</updated>
  <id>http://ikarishinjieva.github.com/blog/</id>
  <author>
    <name><![CDATA[Tac Huang (ikari_shinji@github)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jruby中tcp阻塞时Timeout::timeout失效]]></title>
    <link href="http://ikarishinjieva.github.com/blog/blog/2014/01/08/jruby-bug-tcp-timeout/"/>
    <updated>2014-01-08T23:04:00+08:00</updated>
    <id>http://ikarishinjieva.github.com/blog/blog/2014/01/08/jruby-bug-tcp-timeout</id>
    <content type="html"><![CDATA[<h3>问题场景</h3>

<p>首先有一台tcp server, 模拟一个黑洞</p>

<p>``` ruby
require 'socket'</p>

<p>tcp_server = TCPServer.new("0.0.0.0", 6666)</p>

<p>loop do</p>

<pre><code> socket = tcp_server.accept
 puts 'got conn']
 #blackhole
</code></pre>

<p>end
```</p>

<p>然后发起一个connection, 从server接受消息(很显然会阻塞在recv上), 并用<code>Timeout::timeout</code>设置一个超时时间</p>

<p>``` ruby
require "socket"
require "timeout"</p>

<p>sock = Socket.new(Socket::AF_INET, Socket::SOCK_STREAM, 0)
addr = Socket.sockaddr_in(6666, "127.0.0.1")
sock.connect(addr)</p>

<p>Timeout::timeout(5) {</p>

<pre><code> sock.recv(1)
</code></pre>

<p>}
```</p>

<p>上面这个场景如果在ruby上跑,5秒后会超时,但如果使用jruby(1.7.6)就会一直处于阻塞</p>

<h3>解决方案</h3>

<p>使用非阻塞<code>recv</code>,可以在jruby上正常运行</p>

<p>``` ruby
require "socket"
require "timeout"</p>

<p>sock = Socket.new(Socket::AF_INET, Socket::SOCK_STREAM, 0)
addr = Socket.sockaddr_in(6666, "127.0.0.1")
sock.connect(addr)</p>

<p>Timeout::timeout(5) {</p>

<pre><code>begin
    sock.recv_nonblock(1)
rescue IO::WaitReadable
    IO.select([sock],nil,nil,5)
    retry
end
</code></pre>

<p>}
```</p>

<h3>猜测</h3>

<p>查看一下ruby <code>timeout.rb</code>的源码</p>

<p>```ruby
  begin</p>

<pre><code>x = Thread.current
y = Thread.start {
  begin
    sleep sec
  rescue =&gt; e
    x.raise e
  else
    x.raise exception, "execution expired"
  end
}
return yield(sec)
</code></pre>

<p>  ensure</p>

<pre><code>if y
  y.kill
  y.join # make sure y is dead.
end
</code></pre>

<p>  end
```</p>

<p>大概看到timeout是起了一个计时线程,超时时向主线程发起exception</p>

<p>猜测是因为jvm的线程模型导致exception不能向阻塞线程提交,但有待验证</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jruby backtick + jre 6 会卡住]]></title>
    <link href="http://ikarishinjieva.github.com/blog/blog/2013/10/11/jruby-175-jre-6-stdin-bug/"/>
    <updated>2013-10-11T22:03:00+08:00</updated>
    <id>http://ikarishinjieva.github.com/blog/blog/2013/10/11/jruby-175-jre-6-stdin-bug</id>
    <content type="html"><![CDATA[<p>最近在jruby 1.7.5 + jre 6上碰到的土亢</p>

<h1>现象</h1>

<p>用backtick调用命令，比如
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>用backtick调用命令  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;.</span><span class="n">/some_script</span><span class="o">&lt;</span><span class="sr">/code&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在调用命令之前/同时在terminal输入一些回车，有一定概率backtick的调用会卡住不返回。
此时再输入一个回车，调用会继续执行并返回。</p>

<h1>解决</h1>

<p>一切靠猜</p>

<p>jruby有个bug：<a href="http://jira.codehaus.org/browse/JRUBY-4626">Gaps in STDIN pipe stream if backtick is used</a></p>

<p>Charles Oliver Nutter在comment中写到"For JRuby 1.7pre1 on Java 7, this should be fixed; TTY should be handled correctly. For other Java versions, we can't fix this."，于是最方便的就是升级jre到7</p>

<p>经验证升级jre可以从土亢中爬出来。
如果难以升级jre，参看<a href="https://www.ruby-forum.com/topic/4413754">这里</a>，这个兄弟做了很全的测试。可以用IO.popen或者Open3.popen3替换backtick。</p>

<h1>经验</h1>

<p>jruby有坑，同时也提供了便捷的手段将现有的java项目改成比较爽的样子。这些坑是难以预料的，做好准备，然后一如既往踩过去。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jruby重写java项目的一些总结]]></title>
    <link href="http://ikarishinjieva.github.com/blog/blog/2013/08/29/rewrite-project-into-ruby/"/>
    <updated>2013-08-29T21:22:00+08:00</updated>
    <id>http://ikarishinjieva.github.com/blog/blog/2013/08/29/rewrite-project-into-ruby</id>
    <content type="html"><![CDATA[<p>久不更新了，6月换了工作</p>

<p>最近将一个小项目从java迁移到了jruby，在此总结一下</p>

<h1>从结果开始</h1>

<p>1.代码量上的比较</p>

<table>
<thead>
<tr>
<th></th>
<th> *             </th>
<th> 纯Java项目     </th>
<th> Jruby项目    </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 主代码行数       </td>
<td> 4073          </td>
<td> 2689 - 454 |</td>
</tr>
<tr>
<td></td>
<td> 测试代码行数    </td>
<td> 1707          </td>
<td> 1485 - 319 |</td>
</tr>
</tbody>
</table>


<p>其中Jruby项目中有454行主代码和319行测试代码为新加功能</p>

<p>结论是在迁移了所有功能后，主代码量减少了45%+，测试代码比例从41%增加到52%，测试case数也增加</p>

<p>2.DSL</p>

<p>在迁移过程中，加入了一些DSL，让代码变得更可读，类似于</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">unless</span> <span class="n">can_load</span> <span class="n">local_node</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">from_file</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;load local_node.config, :sip_ip</span>
</span><span class='line'><span class="sr">cluster.join local_node.config.sip_ip</span>
</span><span class='line'><span class="sr">cluster.lock &quot;lock_config&quot; do</span>
</span><span class='line'><span class="sr">    load_remote_global_config</span>
</span><span class='line'><span class="sr">    load local_node.config, with(@remote_global_config)</span>
</span><span class='line'><span class="sr">    dump local_node.config</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;else</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>如果了所有符号，就变成稍微(!)可读的一篇描述</p>

<p>3.部署</p>

<p>jruby可以被编译成class，打成jar，跑在一切有jvm和jruby jar的地方。与现有java项目的融合不成问题，此次也是迁移了整个项目中的一部分，其他部分保留java</p>

<h1>一些细节</h1>

<p>1.代码量的减少</p>

<p>抛弃脚本语言的优势论不谈，实践中，代码量的明显减少来自于以下几个方面：</p>

<p>   1.1.调用命令行更方便，在纯java中调用命令行比较烦，即使封装半天也很不爽。代码量差别不是很大，主要是不爽</p>

<p>   1.2.闭包。java中传递闭包得靠实现匿名接口，冗长麻烦，影响函数的复用。（要不定义多个函数，要不到处new interface）</p>

<p>   1.3.mixin。奇怪的是我混入的往往不是特性，而是辅助函数... 尽管这种方法不正规，但对于小类来说非常实用。比较以下两段代码</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def aaaa</span>
</span><span class='line'><span class="sr">    XxxUtils.blabla ...</span>
</span><span class='line'><span class="sr">    YyyHelper.blublu ...</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;include XxxUtils, YyyHelper</span>
</span><span class='line'><span class="sr">def aaaa</span>
</span><span class='line'><span class="sr">    blabla ...</span>
</span><span class='line'><span class="sr">    blublu ...</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>   如果你跟我一样厌恶到处都是Utils、Helper，又比较烦static import...</p>

<p>   "mixin太多很容易命名冲突引起问题"，不得不承认这个担心是对的，我爽我的，谁爱操心谁操心吧。顺便提一句，名空间冲突解决最好的方法还数node.js的。</p>

<p>   1.4.标准库。不得不承认，ruby标准库的人性化做的非常好，链调用能节省很多无用的代码</p>

<p>   1.5.rspec mock。以前用java尽量避免用mock framework，都是用继承注入，太费代码以至于自己都觉得烦（尽管有IDEA的自动代码折叠，还是觉得烦），到处都是注入点的代码也很乱。
   这是一个很难解决的平衡，如果每一段代码都是上下文封闭的，那么代码很容易测试，但处理输入输出需要大量工作，如果不是，那测试就需要mock。
   尝试了rspec mock后（我相信任何mock framework都一样），觉得还不错，目前还没有失控的主要原因是每次mock不超过两层。</p>

<p>   最后，"代码行数不是XXX标准"，是的，我只是减少了无用代码元素在项目中的分布</p>

<p>2.DSL/HSL(Human-specific language)</p>

<p>关于DSL的尝试还很初级，主要目的是读起来通顺，拘泥于以下几种形式：</p>

<p>   2.1.函数名alias。每次写代码的时候是不是纠结于用[].exist、[].exists，或者[].exists?。实践中都是先流畅的（！）写函数梗概，不纠结调用的函数是不是存在，爱怎么用怎么用吧，不存在就alias一下。一切以写作顺畅为目的。</p>

<p>   2.2.mixin。如前面提到的，mixin提供了忽略类名的偏门，可以写出一句流畅的人话，比如cp file，而不是FileUtils.cp file</p>

<p>   2.3.动词函数。比较array.collect和collect array，我喜欢后面那款。动词函数，让"宾.动"的OO非人话，转换成"动宾"的人话。当然除非你是古文爱好者</p>

<p>   2.4."介词"空函数。就是些输出=输入的空函数，比如之前例中"unless can_load local_node.config.from_file"的can_load就是空函数，较之"unless local_node.config.load_from_file?"更有人味</p>

<p>   2.5.最后，以上几种形式都没有Domain-specific，而是Human-specific。关于DSL的尝试还没有深入到domain的阶段，先从让程序说人话开始</p>

<p>   2.6.难以否认的部分：像所有的城市规划一样，整洁的背后都会藏着付出代价的区域，DSL的背后也会有支持代码，初次读支持代码会发现他们怪异、畸形、目的非常不明确，配合用例才能读懂。
   如何更好的管理这部分付出牺牲的代码值得讨论</p>

<p>3.部署和测试</p>

<p>简单描述一下当前部署方案中的要点</p>

<p>   3.1.跑测试时不用编译，直接跑rb脚本。部署时才编译。可以节省测试时间。</p>

<p>   3.2.程序运行是用java -cp .../jruby.jar com.xxx.XXX。测试运行是用java -cp .../jruby.jar org.jruby.Main -S blabla</p>

<p>   3.3.GEM_HOME 和 GEM_PATH 指向特定folder，用上面的命令安装gem即可将gem安装到指向的folder</p>

<p>   3.4.编译用jrubyc，打jar包的脚本需要自己写</p>

<p>   PS: 写个简单的watchr脚本，可以让主文件和相应的测试文件保存时，自动跑相应的测试，非常省事</p>

<p>4.一些缺陷</p>

<p>不得不承认的缺陷还有很多</p>

<p>   4.1.不是所有项目能平滑接入jruby，之前的确碰到过jruby和EclipseLink的冲突，与boot classpath相关，具体原因不祥。建议迁移前先搭原型进行测试</p>

<p>   4.2.（这条来自于实践经验）HSL(Human-specific language) 不是能全面实现的，只能在程序里的一部分实现，而且随着代码量的增加，支持代码的维护估计会显得吃力。（但是写起来的确很爽）</p>

<p>   4.3.改进后的代码也不是完全可读，难以忽略一些语言元素，也没法忽略业务背景</p>

<p>   4.4.写单元测试吧，懒不是个办法...</p>
]]></content>
  </entry>
  
</feed>
