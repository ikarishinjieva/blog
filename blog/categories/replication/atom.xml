<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: replication | Tac say]]></title>
  <link href="http://ikarishinjieva.github.com/blog/blog/categories/replication/atom.xml" rel="self"/>
  <link href="http://ikarishinjieva.github.com/blog/"/>
  <updated>2013-10-16T23:49:30+08:00</updated>
  <id>http://ikarishinjieva.github.com/blog/</id>
  <author>
    <name><![CDATA[Tac Huang (ikari_shinji@github)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mysql rpl_master.cc:mysql_binlog_send 源码的一些个人分析和吐槽]]></title>
    <link href="http://ikarishinjieva.github.com/blog/blog/2013/10/16/mysql-mysql_binlog_send-src/"/>
    <updated>2013-10-16T22:50:00+08:00</updated>
    <id>http://ikarishinjieva.github.com/blog/blog/2013/10/16/mysql-mysql_binlog_send-src</id>
    <content type="html"><![CDATA[<p>读了两天rpl_master.cc:mysql_binlog_send的源码（Mysql 5.6.11），总结一下</p>

<p>函数的入口是rpl_master.cc:com_binlog_dump，当slave向master向master请求数据时，在master上调用</p>

<p>函数参数说明。log_ident为slave请求的binlog文件名，如"mysql-bin.000001"。pos为slave请求的binlog位置。slave_gtid_executed为gtid相关，在此忽略</p>

<p>在此吐槽：
1. 这个函数将近1k行，且缩进混乱，代码折叠困难。最后附的我的笔记中，有整理好的源码下载
2. 这个函数有两大段近百行的重复代码（1179 &amp; 1553）</p>

<h1>源码的主体结构</h1>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>源码的主体结构  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mysql_binlog_send</span><span class="o">(</span><span class="err">…</span><span class="o">)</span>
</span><span class='line'><span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="mi">0814</span> <span class="err">…</span> <span class="n">bla</span> <span class="n">bla</span>
</span><span class='line'> <span class="mi">1011</span> <span class="n">fake_rotate_event</span>
</span><span class='line'> <span class="mi">1028</span> <span class="n">max_alloed_packet</span><span class="o">=</span> <span class="n">MAX_MAX_ALLOWED_PACKET</span>
</span><span class='line'> <span class="mi">1038</span> <span class="k">if</span> <span class="o">(</span><span class="err">请求的</span><span class="n">POS</span><span class="err">不是从</span><span class="n">binlog</span><span class="err">开头开始</span><span class="o">)</span>
</span><span class='line'> <span class="mi">1039</span> <span class="o">{</span>
</span><span class='line'>           <span class="err">从</span><span class="n">binlog</span><span class="err">开头中找到一个</span><span class="n">FD</span> <span class="n">event</span><span class="o">(</span><span class="n">FORMAT_DESCRIPTION_EVENT</span><span class="o">),</span> <span class="err">并发送给</span><span class="n">slave</span>
</span><span class='line'> <span class="mi">1123</span> <span class="o">}</span>
</span><span class='line'> <span class="mi">1124</span> <span class="k">else</span>
</span><span class='line'> <span class="mi">1125</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">FD</span> <span class="n">event</span><span class="err">可以从正常的</span><span class="n">replication</span><span class="err">中传送给</span><span class="n">slave</span><span class="err">，此处不做操作</span>
</span><span class='line'> <span class="mi">1127</span> <span class="o">}</span>
</span><span class='line'> <span class="mi">1132</span> <span class="k">while</span> <span class="o">(</span><span class="n">net</span><span class="err">和</span><span class="n">the</span><span class="err">都在运转</span><span class="o">)</span>
</span><span class='line'> <span class="mi">1133</span> <span class="o">{</span>
</span><span class='line'> <span class="mi">1143</span>      <span class="k">while</span> <span class="o">(</span><span class="err">从</span><span class="n">binlog</span><span class="err">中读取一个</span><span class="n">event</span><span class="o">)</span>
</span><span class='line'> <span class="mi">1144</span>      <span class="o">{</span>
</span><span class='line'> <span class="mi">1178</span>           <span class="k">switch</span> <span class="o">(</span><span class="n">event_type</span><span class="o">)</span>
</span><span class='line'> <span class="mi">1179</span>           <span class="o">{</span>
</span><span class='line'>                     <span class="err">分类型处理</span><span class="n">event</span>
</span><span class='line'> <span class="mi">1281</span>           <span class="o">}</span>
</span><span class='line'> <span class="mi">1283</span>           <span class="err">若</span><span class="n">event</span><span class="err">需跳转到下一个</span><span class="n">binlog</span><span class="o">(</span><span class="n">goto_next_binlog</span><span class="o">),</span> <span class="k">break</span>
</span><span class='line'> <span class="mi">1291</span>           <span class="n">fire</span> <span class="n">HOOK</span> <span class="n">before_send_event</span>
</span><span class='line'> <span class="mi">1300</span>           <span class="err">记录</span><span class="n">skip_group</span>
</span><span class='line'> <span class="mi">1306</span>           <span class="o">{</span>
</span><span class='line'>                     <span class="n">send</span> <span class="n">last</span> <span class="n">skip</span> <span class="n">group</span> <span class="n">heartbeat</span><span class="o">?</span>
</span><span class='line'> <span class="mi">1326</span>           <span class="o">}</span>
</span><span class='line'> <span class="mi">1331</span>           <span class="err">向</span><span class="n">slave</span><span class="err">发送</span><span class="n">event</span>
</span><span class='line'> <span class="mi">1348</span>           <span class="o">{</span>
</span><span class='line'>                     <span class="err">处理</span><span class="n">LOAD_EVENT</span>
</span><span class='line'> <span class="mi">1356</span>           <span class="o">}</span>
</span><span class='line'> <span class="mi">1358</span>           <span class="n">fire</span> <span class="n">HOOK</span> <span class="n">after_send_event</span>
</span><span class='line'> <span class="mi">1369</span>      <span class="o">}</span>
</span><span class='line'> <span class="mi">1391</span>      <span class="k">if</span> <span class="o">(!</span><span class="n">goto_next_binlog</span><span class="o">)</span>
</span><span class='line'> <span class="mi">1392</span>      <span class="o">{</span>
</span><span class='line'>               <span class="err">发送完所有</span><span class="n">binlog</span><span class="err">，未发生</span><span class="n">binlog</span><span class="err">切换时</span>
</span><span class='line'> <span class="mi">1437</span>          <span class="err">加锁尝试再读取一个</span><span class="n">event</span><span class="err">（此时其他进程不能更新</span><span class="n">binlog</span><span class="err">），目的是试探之前处理过程中</span><span class="n">master</span><span class="err">上是否有更多的</span><span class="n">binlog</span><span class="err">写入，若有，则跳转</span><span class="mi">1553</span><span class="err">处理</span><span class="n">read_packet</span>
</span><span class='line'> <span class="mi">1451</span>          <span class="err">若没有更多的</span><span class="n">binlog</span>
</span><span class='line'>               <span class="o">{</span>
</span><span class='line'>                    <span class="err">等待更多的</span><span class="n">binlog</span><span class="err">写入，等待时发送心跳</span>
</span><span class='line'> <span class="mi">1545</span>          <span class="o">}</span>
</span><span class='line'> <span class="mi">1553</span>          <span class="err">处理</span><span class="n">read_packet</span>
</span><span class='line'>               <span class="o">{</span>
</span><span class='line'>                    <span class="err">分类型处理</span><span class="n">event</span>
</span><span class='line'> <span class="mi">1682</span>          <span class="o">}</span>
</span><span class='line'> <span class="mi">1683</span>      <span class="o">}</span>
</span><span class='line'> <span class="mi">1685</span>      <span class="k">if</span> <span class="o">(</span><span class="n">goto_next_binlog</span><span class="o">)</span>
</span><span class='line'>           <span class="o">{</span>
</span><span class='line'>                <span class="err">切换到下一个</span><span class="n">binlog</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'> <span class="mi">1733</span> <span class="o">}</span>
</span><span class='line'> <span class="mi">1735</span> <span class="err">之后是收尾处理</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>重点步骤</h1>

<ol>
<li>关于Format Description event，如果传送从binlog开头开始，那么FD event会正常随着binlog传送；若传送不从binlog开头开始，则需要补发一个FD event，才开始传送</li>
<li>如何判断binlog读取完。函数先不加锁读取binlog中的event，读完后，再加锁尝试读取一个event（加锁过程中，没有其他进程写进binlog），若有数据，则继续处理，若没有数据，则说明binlog读取完了，master会阻塞等待新的binlog写入。这样做主要为了：1. 不需要一直加锁读取binlog，保障性能；2. 无锁读取时会有其他进程写binlog，加锁可以保障这些新加的binlog得到妥善安置</li>
<li>心跳。心跳尽在不传送binlog时（master穷尽了binlog，开始阻塞等待新的binlog写入时）才进行心跳</li>
<li>Fake Rotate Event。Fake Rotate Event在开始传送和切换binlog时发送到slave。主要作用是通知slave binlog filename，原因在源码comment里写的很清楚。但是很疑惑的是为什么在FD event里并没有binlog filename，这个问题发到了<a href="http://stackoverflow.com/questions/19375951/in-mysql-replication-why-format-description-event-doesnt-include-binlogs-name">StackoverFlow</a>，未有答案。（诶，看看我的stackoverflow的记录就知道，我的问题都是死题）</li>
</ol>


<h1>TODO</h1>

<p>有一些东西还是没弄懂，得慢慢读懂其他机制才可以，比如
1. max_alloed_packet是如何作用的
2. send last skip group heartbeat的作用
3. 不同类型的event的具体处理，需要和slave端结合在一起</p>

<h1>我的笔记</h1>

<p>我的笔记<a href="https://app.yinxiang.com/shard/s11/sh/f23e9619-9c3d-47f5-a911-8945d0ee02a5/f4eb8539fb2f99e1481496c994b2c270">在此</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql 5.6.15 replication中碰到的死锁]]></title>
    <link href="http://ikarishinjieva.github.com/blog/blog/2013/10/11/hole-in-mysql-56-replication-dead-lock/"/>
    <updated>2013-10-11T21:21:00+08:00</updated>
    <id>http://ikarishinjieva.github.com/blog/blog/2013/10/11/hole-in-mysql-56-replication-dead-lock</id>
    <content type="html"><![CDATA[<p>简述下今天在mysql 5.6.15上碰到的土亢</p>

<h1>现象</h1>

<p>mysql开启主从复制时，用meb（MySQL Enterprise Backup）做备份会卡住。同时在slave上show slave status也会卡住。</p>

<p>查看slave上show processlist，可以看到sql thread的状态为 "Waiting for commit lock"</p>

<h1>猜测</h1>

<p>无论是"SHOW ENGINE INNODB STATUS"还是"SHOW OPEN TABLES"都没有提供有用的信息，还是一切靠猜</p>

<p>夜观天象猜到mysql存在bug <a href="http://bugs.mysql.com/bug.php?id=70307">"Another deadlock on FLUSH TABLES WITH READ LOCK + SHOW SLAVE STATUS"</a></p>

<p>其中描述了sql thread开始执行了transaction，但是没有commit的间隙，在slave上FLUSH TABLES WITH READ LOCK，会出现死锁</p>

<p>于是猜测，如果meb恰好在slave上某个transaction commit之前做了FLUSH TABLES WITH READ LOCK，然后调用了与"SHOW SLAVE STATUS"类似的机制获取slave info，那么就会如bug所述卡住。然后mysql由于TABLE LOCk的存在，sql thread也就会卡住。</p>

<p>BTW：搜一下mysql bug库，会有一些描述类似的bug，其中70307描述最靠谱，且有详细的<a href="http://bugs.mysql.com/file.php?id=20542">重现步骤</a>，我也成功在mysql 5.6.15上重现了bug。</p>

<h1>结果</h1>

<p>实验后证明猜对了...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实验：Mysql master-slave-standby将source从master切换到standby]]></title>
    <link href="http://ikarishinjieva.github.com/blog/blog/2013/05/15/mysql-master-slave-standby-failover/"/>
    <updated>2013-05-15T22:40:00+08:00</updated>
    <id>http://ikarishinjieva.github.com/blog/blog/2013/05/15/mysql-master-slave-standby-failover</id>
    <content type="html"><![CDATA[<p>尝试了&lt;Mysql High Availability&gt;第四章热备份一节的实验,记录步骤.</p>

<p>先统一原语,master/slave/standby表示三台机器名,source/target代表replication关系的两端（不适用master/slave用以和机器名区分）."master(3)"表示master机器的db里有三条数据1,2,3.</p>

<p>实验开始.</p>

<ol>
<li>初始状态是存在master->slave, master->standby的replication</li>
<li>standby在切换成source时,需要有bin-log和replication user. 在此重新设置master->standby的replication, 让standby满足要求.</li>
</ol>


<p>忽略replication user的部分.</p>

<p>bin-log的部分在my.cnf里要设置log-bin和log-slave-updates(默认情况下,master->standby的replication不会写standby的bin-log,需开始standby的log-slave-updates才会写).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server-id               = 3
</span><span class='line'>log_bin                 = /var/log/mysql/mysql-bin.log
</span><span class='line'>...
</span><span class='line'>relay-log-index         = /var/log/mysql/slave-relay-bin.index
</span><span class='line'>relay-log               = /var/log/mysql/slave-relay-bin
</span><span class='line'>log-slave-updates</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ol>
<li>测试一下standby binlog设置成功。可以在master插入一条数据，在standby查看</li>
</ol>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>standby> show binlog events;
</span><span class='line'>+------------------+------+-------------+-----------+-------------+------------------------------------------------------------------------+
</span><span class='line'>| Log_name         | Pos  | Event_type  | Server_id | End_log_pos | Info                                                                   |
</span><span class='line'>+------------------+------+-------------+-----------+-------------+------------------------------------------------------------------------+
</span><span class='line'>| mysql-bin.000001 |    4 | Format_desc |         3 |         107 | Server ver: 5.5.31-0ubuntu0.12.04.1-log, Binlog ver: 4                 |
</span><span class='line'>| mysql-bin.000001 |  107 | Query       |         1 |         166 | BEGIN                                                                  |
</span><span class='line'>| mysql-bin.000001 |  166 | Query       |         1 |         257 | use &lt;code>tac&lt;/code>; insert into test values(8889)                               |
</span><span class='line'>| mysql-bin.000001 |  257 | Xid         |         1 |         284 | COMMIT /&lt;em> xid=111 &lt;/em>/  &lt;br/>
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ol>
<li>将replication调整至状态master(3),standby(2),slave(1). 人工造成各db的状态不一致</li>
</ol>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>master> insert into test values(1);
</span><span class='line'>slave> stop slave;
</span><span class='line'>master> insert into test values(2);
</span><span class='line'>standby> stop slave;
</span><span class='line'>master> insert into test values(3);</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ol>
<li><p>想象此时master挂掉,开始将source从master切换成standby</p></li>
<li><p>在建立standby->slave的replication之前，需要将standby和slave数据同步(此时slave落后于standby)。</p></li>
</ol>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-- 先查看standby从master拿了多少数据
</span><span class='line'>standby> show slave status \G
</span><span class='line'>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;em> 1. row &lt;/em>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>
</span><span class='line'>...&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>    Master_Log_File: master-bin.000023
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>...&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>    Exec_Master_Log_Pos: 1391
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>-- 让slave从master上同步到跟standby同样的位置
</span><span class='line'>slave> start slave until master_log_file = 'master-bin.000023', master_log_pos = 1391;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>有意思的是此处用了master(其实我们假设master已经坏了...)。</p>

<ol>
<li>此时可以讲slave的source从master切换到standby. 一个问题就是standby->slave的开始位置可能是和master->slave不同</li>
</ol>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-- 查看standby binlog的当前位置
</span><span class='line'>mysql> show master status \G
</span><span class='line'>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;strong>&lt;em> 1. row &lt;/em>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/strong>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>File: mysql-bin.000001 
</span><span class='line'>Position: 796
</span><span class='line'>Binlog_Do_DB:
</span><span class='line'>Binlog_Ignore_DB:
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>-- 注意与master上的文件名和位置都不同&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>-- 切换slave的source
</span><span class='line'>slave> change master to&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>          master_host = '192.168.50.4', 
</span><span class='line'>          master_port = 3306, 
</span><span class='line'>          master_user = 'repl', 
</span><span class='line'>          master_password = 'repl', 
</span><span class='line'>          master_log_file = 'mysql-bin.000001', 
</span><span class='line'>          master_log_pos = 796;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ol>
<li>测试一下standby->slave replication.</li>
</ol>


<p>总的思路就是讲master(3),standby(2),slave(1)同步成master(3),standby(2),slave(2),然后将master->slave切换成standby->slave.</p>

<p>遗留了两个问题,其一是slave和standby同步时使用了"坏掉"的master;其二是master超前了standby和slave, 也就是standby->slave丢失了master的超前数据。留待慢慢学习。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Mysql binlog的一点学习]]></title>
    <link href="http://ikarishinjieva.github.com/blog/blog/2013/05/12/mysql-binlog-study/"/>
    <updated>2013-05-12T22:59:00+08:00</updated>
    <id>http://ikarishinjieva.github.com/blog/blog/2013/05/12/mysql-binlog-study</id>
    <content type="html"><![CDATA[<p>差不多一个月没更新了。除了忙些琐事，就是偷点懒。</p>

<p>在读&lt;Mysql High Availability&gt;，扫了一遍，读第二遍的时候开始做些实验，所以这之后的blog写的也会没什么章法。</p>

<p>&lt;Mysql High Availability&gt;第三章介绍binlog时特地提到了Rand()/Now()/User variable/Password()在基于sql复制时的行为，简单做些实验。</p>

<ol>
<li>Rand()</li>
</ol>


<p>Rand() 在replication中，值会被正确传递。如下查看binlog，发现pos 209处rand_seed会被传给slave，保证rand生成的值保持一致。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql> show binlog events in 'master-bin.000007';
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
</span><span class='line'>| Log_name          | Pos | Event_type  | Server_id | End_log_pos | Info                                                   |
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
</span><span class='line'>| master-bin.000007 |   4 | Format_desc |         1 |         107 | Server ver: 5.5.31-0ubuntu0.12.04.1-log, Binlog ver: 4 |
</span><span class='line'>| master-bin.000007 | 107 | Query       |         1 |         174 | BEGIN                                                  |
</span><span class='line'>| master-bin.000007 | 174 | RAND        |         1 |         209 | rand_seed1=598597315,rand_seed2=24268577               |
</span><span class='line'>| master-bin.000007 | 209 | Query       |         1 |         302 | use &lt;code>tac&lt;/code>; insert into test values(rand())             |
</span><span class='line'>| master-bin.000007 | 302 | Xid         |         1 |         329 | COMMIT /&lt;em> xid=151 &lt;/em>/                                   |
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ol>
<li>Now()</li>
</ol>


<p>Now() 在replication中，值会被正确传递。如下查看binlog，pos 283处，貌似这个语句传给slave，会由于master和slave的时间不同步，导致问题。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> master&gt; flush logs;
</span><span class='line'> master&gt; SET TIMESTAMP=unix_timestamp('2010-10-01 12:00:00');
</span><span class='line'> master&gt; insert into test values(now());
</span><span class='line'> master&gt; show binlog events in 'master-bin.000007';
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
</span><span class='line'>| Log_name          | Pos | Event_type  | Server_id | End_log_pos | Info                                                   |
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
</span><span class='line'>| master-bin.000012 |   4 | Format_desc |         1 |         107 | Server ver: 5.5.31-0ubuntu0.12.04.1-log, Binlog ver: 4 |
</span><span class='line'>| master-bin.000012 | 107 | Query       |         1 |         182 | BEGIN                                                  |
</span><span class='line'>| master-bin.000012 | 182 | Query       |         1 |         283 | use &lt;code>tac&lt;/code>; insert into test values (now())             |
</span><span class='line'>| master-bin.000012 | 283 | Xid         |         1 |         310 | COMMIT /&lt;em> xid=131 &lt;/em>/                                   |
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>但通过mysqladmin查看binlog，可以看到binlog中会不断插入TIMESTAMP来保证now()函数的执行结果在master和slave是相同的。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>master> sudo mysqlbinlog --short-form master-bin.000017
</span><span class='line'>...
</span><span class='line'>DELIMITER /&lt;em>!&lt;/em>/;
</span><span class='line'>SET TIMESTAMP=1285934400/&lt;em>!&lt;/em>/;
</span><span class='line'>...
</span><span class='line'>BEGIN
</span><span class='line'>/&lt;em>!&lt;/em>/;
</span><span class='line'>use &lt;code>tac&lt;/code>/&lt;em>!&lt;/em>/;
</span><span class='line'>SET TIMESTAMP=1285934400/&lt;em>!&lt;/em>/;
</span><span class='line'>insert into test values(now())
</span><span class='line'>/&lt;em>!&lt;/em>/;
</span><span class='line'>COMMIT/&lt;em>!&lt;/em>/;
</span><span class='line'>SET TIMESTAMP=1368372377/&lt;em>!&lt;/em>/;
</span><span class='line'>BEGIN
</span><span class='line'>/&lt;em>!&lt;/em>/;
</span><span class='line'>SET TIMESTAMP=1368372377/&lt;em>!&lt;/em>/;
</span><span class='line'>insert into test values(now())
</span><span class='line'>/&lt;em>!&lt;/em>/;
</span><span class='line'>COMMIT/&lt;em>!&lt;/em>/;
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ol>
<li>User variable</li>
</ol>


<p>User variable会被编码成十六进制串，含义不明，保密性不明。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql> flush logs;
</span><span class='line'>Query OK, 0 rows affected (0.02 sec)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>mysql> set @foo = now();
</span><span class='line'>Query OK, 0 rows affected (0.00 sec)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>mysql> insert into test values (@foo);
</span><span class='line'>Query OK, 1 row affected (0.01 sec)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>mysql> show binlog events in 'master-bin.000014';
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+-----------------------------------------------------------------------------------+
</span><span class='line'>| Log_name          | Pos | Event_type  | Server_id | End_log_pos | Info                                                                              |
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+-----------------------------------------------------------------------------------+
</span><span class='line'>| master-bin.000014 |   4 | Format_desc |         1 |         107 | Server ver: 5.5.31-0ubuntu0.12.04.1-log, Binlog ver: 4                            |
</span><span class='line'>| master-bin.000014 | 107 | Query       |         1 |         174 | BEGIN                                                                             |
</span><span class='line'>| master-bin.000014 | 174 | User var    |         1 |         229 | @&lt;code>foo&lt;/code>=_latin1 0x323031302D31302D30312031323A30303A3030 COLLATE latin1_swedish_ci |
</span><span class='line'>| master-bin.000014 | 229 | Query       |         1 |         321 | use &lt;code>tac&lt;/code>; insert into test values (@foo)                                         |
</span><span class='line'>| master-bin.000014 | 321 | Xid         |         1 |         348 | COMMIT /&lt;em> xid=148 &lt;/em>/                                                              |
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+-----------------------------------------------------------------------------------+
</span><span class='line'>5 rows in set (0.00 sec)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ol>
<li>Password()</li>
</ol>


<p>直接内嵌使用password，会在binlog里暴露密码，就像下面的测试。可以使用user variable,但是不知道user variable的编码保密性如何。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql> insert into test values(password('tac'));
</span><span class='line'>mysql> show binlog events in 'master-bin.000015';
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
</span><span class='line'>| Log_name          | Pos | Event_type  | Server_id | End_log_pos | Info                                                   |
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
</span><span class='line'>| master-bin.000015 |   4 | Format_desc |         1 |         107 | Server ver: 5.5.31-0ubuntu0.12.04.1-log, Binlog ver: 4 |
</span><span class='line'>| master-bin.000015 | 107 | Query       |         1 |         174 | BEGIN                                                  |
</span><span class='line'>| master-bin.000015 | 174 | Query       |         1 |         276 | use &lt;code>tac&lt;/code>; insert into test values(password('tac'))    |
</span><span class='line'>| master-bin.000015 | 276 | Xid         |         1 |         303 | COMMIT /&lt;em> xid=158 &lt;/em>/                                   |
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
</span><span class='line'>4 rows in set (0.01 sec)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>简单一点学习如上。</p>
]]></content>
  </entry>
  
</feed>
