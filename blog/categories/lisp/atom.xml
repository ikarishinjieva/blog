<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lisp | Tac say]]></title>
  <link href="http://ikarishinjieva.github.com/blog/blog/categories/lisp/atom.xml" rel="self"/>
  <link href="http://ikarishinjieva.github.com/blog/"/>
  <updated>2014-02-22T10:59:17+08:00</updated>
  <id>http://ikarishinjieva.github.com/blog/</id>
  <author>
    <name><![CDATA[Tac Huang (ikari_shinji@github)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[lisp一个大写的坑]]></title>
    <link href="http://ikarishinjieva.github.com/blog/blog/2013/04/16/lisp-symbol-upper-case/"/>
    <updated>2013-04-16T23:12:00+08:00</updated>
    <id>http://ikarishinjieva.github.com/blog/blog/2013/04/16/lisp-symbol-upper-case</id>
    <content type="html"><![CDATA[<p>最近一直掉在一个坑里，今天刚出坑</p>

<p>想用宏定义不同的函数，类似于:</p>

<p>{% codeblock %}
(defmacro macro (name)</p>

<pre><code>   `(defmethod ,(intern (format nil "set-~a" name)) ()))
</code></pre>

<p>{% endcodeblock %}</p>

<p>跑(macro test)，结果就是
{% codeblock 函数名是"|set-TEST|"，而不是需要的"set-test"%}</p>

<h1><STANDARD-METHOD |set-TEST| NIL></h1>

<p>{% endcodeblock %}</p>

<p>几天的困惑以后（尝试换过lisp的实现去测试），找到了<a href="http://www.cs.rochester.edu/~schubert/247-447/symbols-in-lisp.html">这篇文章</a>，发现是符号名大小写引起的问题</p>

<p>{% codeblock 简单测试一下%}
CL-USER> (eq (intern "test") 'test)
NIL
CL-USER> (intern "test")
|test|
:INTERNAL
CL-USER> (eq (intern "TEST") 'test)
T
CL-USER> (intern "TEST")
TEST
:INTERNAL
{% endcodeblock %}</p>

<p>大小写通过intern生成的符号是不一样的，全大写才会生成正确的符号。</p>

<p>参考：</p>

<p><a href="http://www.cs.rochester.edu/~schubert/247-447/symbols-in-lisp.html">How to handle symbols in LISP</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[略学习Lisp的quote和backquote]]></title>
    <link href="http://ikarishinjieva.github.com/blog/blog/2013/03/18/lisp-quote-backquote/"/>
    <updated>2013-03-18T23:59:00+08:00</updated>
    <id>http://ikarishinjieva.github.com/blog/blog/2013/03/18/lisp-quote-backquote</id>
    <content type="html"><![CDATA[<p>略学习了lisp里面奇怪的符号集，解释这些符号上，人类的语言基本是苍白的。</p>

<p><a href="http://www.lispworks.com/documentation/HyperSpec/Body/02_df.htm">第一份参考</a>来自lispworks的文档，对[`'@,]这几种符号做了定义。</p>

<p><a href="http://wenku.it168.com/d_000648782.shtml">第二份中文参考</a> 被到处抄袭。对quote和backquote做了很好的中文说明，嵌套quote部分惨不忍睹。</p>

<p><a href="http://stackoverflow.com/questions/7549550/using-two-backquotes-and-commas-common-lisp">第三份参考</a> 对嵌套quote做了很好地解释。</p>

<p>{% codeblock 贴一些自己的学习代码 %}
CL-USER> (list 1 2)
(1 2)
CL-USER> '(1 2)
(1 2) ;Quote act as list
CL-USER> `(1 2)
(1 2) ;Backquote act as list</p>

<p>CL-USER> (let ((x 1)) '(,x))
; Evaluation aborted on #&lt;CCL::SIMPLE-READER-ERROR #xC78878E>. ;Quote can't work with comma
CL-USER> (let ((x 1)) `(,x))
(1) ;Backquote can work with comma</p>

<p>CL-USER> (let ((x <code>(1 2)))</code>(,@x))
(1 2) ;BackQuote can work with comma-at-sign</p>

<p>CL-USER> (let ((x <code>(1 2)))</code>(,x))
((1 2)) ;x will not be "expand" when use comma instead of comma-at-sign
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在读lisp入门]]></title>
    <link href="http://ikarishinjieva.github.com/blog/blog/2013/02/28/lisp-book/"/>
    <updated>2013-02-28T00:20:00+08:00</updated>
    <id>http://ikarishinjieva.github.com/blog/blog/2013/02/28/lisp-book</id>
    <content type="html"><![CDATA[<p>花了几天时间在读<a href="http://book.douban.com/subject/11238123">lisp的入门</a>。</p>

<p>是本写得十分中肯的语言书。冗长，事无巨细，配图和代码样例精准。就算不看冗长的英文只看代码样例，也能了解个大概。对lisp辅助工具的介绍非常详尽，就算是programming ruby也没达到这个程度。习题丰富。</p>
]]></content>
  </entry>
  
</feed>
