<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: binlog | Tac say]]></title>
  <link href="http://ikarishinjieva.github.com/blog/blog/categories/binlog/atom.xml" rel="self"/>
  <link href="http://ikarishinjieva.github.com/blog/"/>
  <updated>2014-04-04T19:31:26+08:00</updated>
  <id>http://ikarishinjieva.github.com/blog/</id>
  <author>
    <name><![CDATA[Tac Huang (ikari_shinji@github)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mysql, 利用假master重放binlog]]></title>
    <link href="http://ikarishinjieva.github.com/blog/blog/2014/03/26/mysql-fake-master-server/"/>
    <updated>2014-03-26T20:08:00+08:00</updated>
    <id>http://ikarishinjieva.github.com/blog/blog/2014/03/26/mysql-fake-master-server</id>
    <content type="html"><![CDATA[<h4>场景</h4>

<p>这次想解决的场景是想在一个mysqld实例上重放一些来自于其他实例的binlog, 传统的方法是<code>mysqlbinlog</code>. 但是<code>mysqlbinlog</code>会带来一些问题, 比如这个<a href="http://bugs.mysql.com/bug.php?id=33048">bug</a></p>

<p>后同事转给我一种利用<a href="http://www.orczhou.com/index.php/2013/11/use-mysql-replication-to-recove-binlog/">复制重放binlog的方法</a>, 其中提到两种方式:</p>

<ul>
<li>第一种是修改relay log的信息, 将binlog作为relay log来放. 这是种很好的方法, 缺点是<code>mysqld</code>需要停机重启. 如果不重启, server中对于<code>relay-log.index</code>和<code>relay-log.info</code>等的缓存不会刷新.</li>
<li>第二种是起另外一个mysqld实例, 将binlog作为relay log, 再将此实例作为master, 向目标实例进行复制. 这种方式的缺点是作为中间人的mysqld实例需要消耗资源</li>
</ul>


<p>于是想办法将第二种方法进行改进, 即制造一个假的master, 实现简单的复制协议, 直接将binlog复制给目标mysqld实例. 与第二种方式相比, 好处在于只使用少量资源 (一个端口, 一点用来读文件的内存).</p>

<h4>实现</h4>

<p>实现参看我的<a href="https://github.com/ikarishinjieva/mysql_binlog_utils/blob/master/fake_master_server.go">github</a></p>

<p><strong>注意: 此实现仅适用于mysql 5.5.33, 其它版本未测试</strong></p>

<p>由于<a href="http://dev.mysql.com/doc/internals/en/client-server-protocol.html">mysql internals</a> 已经将mysql的网络协议写的比较详细, 需要做的只是起一个tcp的server, 同目标mysqld实例进行交互即可.</p>

<p>此处逐层介绍实现, 将忽略不需要特别注意的部分. 为了简单, 将binlog的来源mysqld实例称为A, 目标mysqld实例称为B, 假master称为T.</p>

<p>目标就是讲从A获得的binlog文件, 通过T, 在B上重放出来</p>

<p>从B发起<code>start slave</code>, 到T真正向B复制数据, 需要下面两个阶段</p>

<h5>1. Handshake Phase</h5>

<h5>2. Replication Phase</h5>

<p>先介绍Handshake Phase, 有以下步骤</p>

<h5>1.1 B执行<code>start slave</code>, 此时B向T建立一个TCP连接</h5>

<h5>1.2 T向B发送handshake packet</h5>

<h5>1.3 B向T回复handshake packet response</h5>

<h5>1.4 T向B发送ok packet</h5>

<p>在Replication Phase, 有以下步骤</p>

<h5>2.1 B向T查询<code>SELECT UNIX_TIMESTAMP()</code></h5>

<h5>2.2 B向T查询<code>SHOW VARIABLES LIKE 'SERVER_ID'</code></h5>

<h5>2.3 B向T执行<code>SET @master_heartbeat_period=</code></h5>

<h5>2.4 B向T发送COM_REGISTER_SLAVE packet, 得到T回复的ok packet</h5>

<h5>2.5 B向T发送COM_BINLOG_DUMP packet, T开始向B逐一发送binlog event packet</h5>

<p>到目前为止, 所有的packet定义都可以在<a href="http://dev.mysql.com/doc/internals/en/client-server-protocol.html">mysql internals</a>, 逐一实现即可. 这里只简述一些处理packet时需要注意的细节.</p>

<h4>处理packet时需要注意的细节</h4>

<ul>
<li>所有的packet都会包装一个<a href="http://dev.mysql.com/doc/internals/en/mysql-packet.html">header</a>, 其中包括packet payload(不包括header)的大小, 和序号</li>
<li>对于序号的处理, 比如2.2中B向T查询<code>SHOW VARIABLES LIKE 'SERVER_ID'</code>, B向T发送的第一个包序号为0, T向B回复的几个包序号依次递增为1,2,3...</li>
<li>注意数据类型, 仅整数, mysql的协议里有<a href="http://dev.mysql.com/doc/internals/en/integer.html">定长整数</a>和变长整数(length encoded integer), 需要特别留意packet payload的类型描述</li>
<li>说明一下<a href="http://dev.mysql.com/doc/internals/en/com-query-response.html#packet-COM_QUERY_Response">query response packet</a>. 比如B向T做一个查询, T将通过query response packet来返回查询结果. 需要说明的是, 如果查询结果为空 (比如<code>SET @master_heartbeat_period= ?</code>的结果), 仅需返回<code>COM_QUERY_RESPONSE</code>, 后面不需要跟着空的column定义和row数据</li>
</ul>


<h4>对超大packet的支持</h4>

<p>当一个packet过大 (超过<code>1&lt;&lt;24-1</code>byte ~= 16 MB) 时, 传输需要对packet进行切割, 参看<a href="http://dev.mysql.com/doc/internals/en/sending-more-than-16mbyte.html">这里</a></p>

<p>注意, 在A上生成binlog时, 是可以容纳大于16MB的packet的, 也就是原binlog里存在超大的event, 需要在传输时加以限制</p>

<p>切割packet没什么特别之处, 仅需要注意包格式, 一个20MB的event的传输packet格式举例为 (此处用<code>16MB</code>便于描述, 应为<code>1&lt;&lt;24-1</code>byte):</p>

<pre><code>packet 1
    4字节 packet header
    1字节 值为[00], 是binlog event的特征标志
    16MB-1字节 为第一段数据

packet 2
    4字节 packet header
    20MB-16MB+1字节 为第二段数据
</code></pre>

<p>需要注意的是之后的packet时不带有[00]特征位的. 而包的大小计算范围为<strong>除去前4字节</strong>的全部字节</p>

<h4>一些资料</h4>

<p>除上文提到的资料, 还推荐<a href="http://boytnt.blog.51cto.com/966121/1279318">MySQL通讯协议研究系列</a>, 会对包格式有个直观感觉</p>

<h4>Trouble shooting</h4>

<p>在整个过程中, 有时候需要<code>gdb</code>到<code>mysqld</code>里来了解通讯协议的工作机制, 这里记录几个常用的函数入口点</p>

<h5>1. slave连接到master时</h5>

<pre><code>#0  wait_for_data (fd=21, timeout=3600) at /vagrant/mysql-5.5.35/sql-common/client.c:208
#1  0x00000000007316aa in my_connect (fd=21, name=0x7fa074004fd0, namelen=16, timeout=3600) at /vagrant/mysql-5.5.35/sql-common/client.c:187
#2  0x00000000007363cb in mysql_real_connect (mysql=0x7fa074004960, host=0x3959cc8 "192.168.56.1", user=0x3959d05 "repl", passwd=0x3959d36 "", db=0x0, port=3306, unix_socket=0x0, client_flag=2147483648)
    at /vagrant/mysql-5.5.35/sql-common/client.c:3282
#3  0x000000000057f138 in connect_to_master (thd=0x7fa074000a40, mysql=0x7fa074004960, mi=0x3959640, reconnect=false, suppress_warnings=false) at /vagrant/mysql-5.5.35/sql/slave.cc:4297
#4  0x000000000057edd1 in safe_connect (thd=0x7fa074000a40, mysql=0x7fa074004960, mi=0x3959640) at /vagrant/mysql-5.5.35/sql/slave.cc:4233
#5  0x000000000057b15c in handle_slave_io (arg=0x3959640) at /vagrant/mysql-5.5.35/sql/slave.cc:2851
#6  0x00007fa096751851 in start_thread () from /lib64/libpthread.so.0
#7  0x00007fa0954a690d in clone () from /lib64/libc.so.6
</code></pre>

<h5>2. handshake phase</h5>

<pre><code>#0  send_server_handshake_packet (mpvio=0x7fa0942eb450, data=0x391e5b4 "=!-\\gq$\\%&gt;J8z}'EgVW5", data_len=21) at /vagrant/mysql-5.5.35/sql/sql_acl.cc:8084
#1  0x000000000059a87c in server_mpvio_write_packet (param=0x7fa0942eb450, packet=0x391e5b4 "=!-\\gq$\\%&gt;J8z}'EgVW5", packet_len=21) at /vagrant/mysql-5.5.35/sql/sql_acl.cc:9082
#2  0x000000000059bc99 in native_password_authenticate (vio=0x7fa0942eb450, info=0x7fa0942eb468) at /vagrant/mysql-5.5.35/sql/sql_acl.cc:9713
#3  0x000000000059ad86 in do_auth_once (thd=0x391cc70, auth_plugin_name=0x1026760, mpvio=0x7fa0942eb450) at /vagrant/mysql-5.5.35/sql/sql_acl.cc:9336
#4  0x000000000059b23a in acl_authenticate (thd=0x391cc70, connect_errors=0, com_change_user_pkt_len=0) at /vagrant/mysql-5.5.35/sql/sql_acl.cc:9472
#5  0x00000000006d9eb5 in check_connection (thd=0x391cc70) at /vagrant/mysql-5.5.35/sql/sql_connect.cc:575
#6  0x00000000006d9ffc in login_connection (thd=0x391cc70) at /vagrant/mysql-5.5.35/sql/sql_connect.cc:633
#7  0x00000000006da5ba in thd_prepare_connection (thd=0x391cc70) at /vagrant/mysql-5.5.35/sql/sql_connect.cc:789
#8  0x00000000006daa28 in do_handle_one_connection (thd_arg=0x391cc70) at /vagrant/mysql-5.5.35/sql/sql_connect.cc:855
#9  0x00000000006da583 in handle_one_connection (arg=0x391cc70) at /vagrant/mysql-5.5.35/sql/sql_connect.cc:781
#10 0x00007fa096751851 in start_thread () from /lib64/libpthread.so.0
#11 0x00007fa0954a690d in clone () from /lib64/libc.so.6
</code></pre>

<h5>3. query时回复column定义</h5>

<pre><code>#0  Protocol::send_result_set_metadata (this=0x3767610, list=0x3769328, flags=5)
    at /vagrant/mysql-5.5.35/sql/protocol.cc:677
#1  0x00000000005c6745 in select_send::send_result_set_metadata (this=0x7f350c001658, list=..., flags=5)
    at /vagrant/mysql-5.5.35/sql/sql_class.cc:2132
#2  0x000000000062895a in JOIN::exec (this=0x7f350c001678) at /vagrant/mysql-5.5.35/sql/sql_select.cc:1858
#3  0x000000000062b2a0 in mysql_select (thd=0x37670e0, rref_pointer_array=0x3769400, tables=0x0, wild_num=0,
    fields=..., conds=0x0, og_num=0, order=0x0, group=0x0, having=0x0, proc_param=0x0, select_options=2147748608,
    result=0x7f350c001658, unit=0x3768bf8, select_lex=0x3769218) at /vagrant/mysql-5.5.35/sql/sql_select.cc:2604
#4  0x00000000006232f5 in handle_select (thd=0x37670e0, lex=0x3768b48, result=0x7f350c001658,
    setup_tables_done_option=0) at /vagrant/mysql-5.5.35/sql/sql_select.cc:297
#5  0x00000000005fe82d in execute_sqlcom_select (thd=0x37670e0, all_tables=0x0)
    at /vagrant/mysql-5.5.35/sql/sql_parse.cc:4627
#6  0x00000000005f7379 in mysql_execute_command (thd=0x37670e0) at /vagrant/mysql-5.5.35/sql/sql_parse.cc:2178
#7  0x0000000000600a43 in mysql_parse (thd=0x37670e0, rawbuf=0x7f350c001430 "SELECT UNIX_TIMESTAMP()", length=23,
    parser_state=0x7f35195056f0) at /vagrant/mysql-5.5.35/sql/sql_parse.cc:5664
#8  0x00000000005f490a in dispatch_command (command=COM_QUERY, thd=0x37670e0,
    packet=0x3770e21 "SELECT UNIX_TIMESTAMP()", packet_length=23) at /vagrant/mysql-5.5.35/sql/sql_parse.cc:1040
#9  0x00000000005f3c00 in do_command (thd=0x37670e0) at /vagrant/mysql-5.5.35/sql/sql_parse.cc:773
#10 0x00000000006daa4b in do_handle_one_connection (thd_arg=0x37670e0)
    at /vagrant/mysql-5.5.35/sql/sql_connect.cc:862
#11 0x00000000006da583 in handle_one_connection (arg=0x37670e0) at /vagrant/mysql-5.5.35/sql/sql_connect.cc:781
#12 0x00007f352e043851 in start_thread () from /lib64/libpthread.so.0
#13 0x00007f352cd9890d in clone () from /lib64/libc.so.6
</code></pre>

<h5>4. query读取数据结果</h5>

<pre><code>#0  cli_read_query_result (mysql=0x7f3508004960) at /vagrant/mysql-5.5.35/sql-common/client.c:3829
#1  0x0000000000738016 in mysql_real_query (mysql=0x7f3508004960, query=0xb80e34 "SELECT UNIX_TIMESTAMP()",
    length=23) at /vagrant/mysql-5.5.35/sql-common/client.c:3918
#2  0x00000000005766ec in get_master_version_and_clock (mysql=0x7f3508004960, mi=0x375b400)
    at /vagrant/mysql-5.5.35/sql/slave.cc:1328
#3  0x000000000057b35a in handle_slave_io (arg=0x375b400) at /vagrant/mysql-5.5.35/sql/slave.cc:2881
#4  0x00007f352e043851 in start_thread () from /lib64/libpthread.so.0
#5  0x00007f352cd9890d in clone () from /lib64/libc.so.6
</code></pre>

<h5>5. slave发送COM_BINLOG_DUMP</h5>

<pre><code>#0  request_dump (thd=0x7f35f80008c0, mysql=0x7f35f80076c0, mi=0x3301ac0,
    suppress_warnings=0x7f361c189e2b)
    at /vagrant/mysql-5.5.35/sql/slave.cc:2184
#1  0x000000000057b596 in handle_slave_io (arg=0x3301ac0)
    at /vagrant/mysql-5.5.35/sql/slave.cc:2935
#2  0x00007f3620c66851 in start_thread () from /lib64/libpthread.so.0
#3  0x00007f361f9bb90d in clone () from /lib64/libc.so.6
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Mysql binlog的一点学习]]></title>
    <link href="http://ikarishinjieva.github.com/blog/blog/2013/05/12/mysql-binlog-study/"/>
    <updated>2013-05-12T22:59:00+08:00</updated>
    <id>http://ikarishinjieva.github.com/blog/blog/2013/05/12/mysql-binlog-study</id>
    <content type="html"><![CDATA[<p>差不多一个月没更新了。除了忙些琐事，就是偷点懒。</p>

<p>在读&lt;Mysql High Availability&gt;，扫了一遍，读第二遍的时候开始做些实验，所以这之后的blog写的也会没什么章法。</p>

<p>&lt;Mysql High Availability&gt;第三章介绍binlog时特地提到了Rand()/Now()/User variable/Password()在基于sql复制时的行为，简单做些实验。</p>

<ol>
<li>Rand()</li>
</ol>


<p>Rand() 在replication中，值会被正确传递。如下查看binlog，发现pos 209处rand_seed会被传给slave，保证rand生成的值保持一致。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql> show binlog events in 'master-bin.000007';
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
</span><span class='line'>| Log_name          | Pos | Event_type  | Server_id | End_log_pos | Info                                                   |
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
</span><span class='line'>| master-bin.000007 |   4 | Format_desc |         1 |         107 | Server ver: 5.5.31-0ubuntu0.12.04.1-log, Binlog ver: 4 |
</span><span class='line'>| master-bin.000007 | 107 | Query       |         1 |         174 | BEGIN                                                  |
</span><span class='line'>| master-bin.000007 | 174 | RAND        |         1 |         209 | rand_seed1=598597315,rand_seed2=24268577               |
</span><span class='line'>| master-bin.000007 | 209 | Query       |         1 |         302 | use &lt;code>tac&lt;/code>; insert into test values(rand())             |
</span><span class='line'>| master-bin.000007 | 302 | Xid         |         1 |         329 | COMMIT /&lt;em> xid=151 &lt;/em>/                                   |
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ol>
<li>Now()</li>
</ol>


<p>Now() 在replication中，值会被正确传递。如下查看binlog，pos 283处，貌似这个语句传给slave，会由于master和slave的时间不同步，导致问题。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> master&gt; flush logs;
</span><span class='line'> master&gt; SET TIMESTAMP=unix_timestamp('2010-10-01 12:00:00');
</span><span class='line'> master&gt; insert into test values(now());
</span><span class='line'> master&gt; show binlog events in 'master-bin.000007';
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
</span><span class='line'>| Log_name          | Pos | Event_type  | Server_id | End_log_pos | Info                                                   |
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
</span><span class='line'>| master-bin.000012 |   4 | Format_desc |         1 |         107 | Server ver: 5.5.31-0ubuntu0.12.04.1-log, Binlog ver: 4 |
</span><span class='line'>| master-bin.000012 | 107 | Query       |         1 |         182 | BEGIN                                                  |
</span><span class='line'>| master-bin.000012 | 182 | Query       |         1 |         283 | use &lt;code>tac&lt;/code>; insert into test values (now())             |
</span><span class='line'>| master-bin.000012 | 283 | Xid         |         1 |         310 | COMMIT /&lt;em> xid=131 &lt;/em>/                                   |
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>但通过mysqladmin查看binlog，可以看到binlog中会不断插入TIMESTAMP来保证now()函数的执行结果在master和slave是相同的。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>master> sudo mysqlbinlog --short-form master-bin.000017
</span><span class='line'>...
</span><span class='line'>DELIMITER /&lt;em>!&lt;/em>/;
</span><span class='line'>SET TIMESTAMP=1285934400/&lt;em>!&lt;/em>/;
</span><span class='line'>...
</span><span class='line'>BEGIN
</span><span class='line'>/&lt;em>!&lt;/em>/;
</span><span class='line'>use &lt;code>tac&lt;/code>/&lt;em>!&lt;/em>/;
</span><span class='line'>SET TIMESTAMP=1285934400/&lt;em>!&lt;/em>/;
</span><span class='line'>insert into test values(now())
</span><span class='line'>/&lt;em>!&lt;/em>/;
</span><span class='line'>COMMIT/&lt;em>!&lt;/em>/;
</span><span class='line'>SET TIMESTAMP=1368372377/&lt;em>!&lt;/em>/;
</span><span class='line'>BEGIN
</span><span class='line'>/&lt;em>!&lt;/em>/;
</span><span class='line'>SET TIMESTAMP=1368372377/&lt;em>!&lt;/em>/;
</span><span class='line'>insert into test values(now())
</span><span class='line'>/&lt;em>!&lt;/em>/;
</span><span class='line'>COMMIT/&lt;em>!&lt;/em>/;
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ol>
<li>User variable</li>
</ol>


<p>User variable会被编码成十六进制串，含义不明，保密性不明。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql> flush logs;
</span><span class='line'>Query OK, 0 rows affected (0.02 sec)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>mysql> set @foo = now();
</span><span class='line'>Query OK, 0 rows affected (0.00 sec)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>mysql> insert into test values (@foo);
</span><span class='line'>Query OK, 1 row affected (0.01 sec)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>mysql> show binlog events in 'master-bin.000014';
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+-----------------------------------------------------------------------------------+
</span><span class='line'>| Log_name          | Pos | Event_type  | Server_id | End_log_pos | Info                                                                              |
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+-----------------------------------------------------------------------------------+
</span><span class='line'>| master-bin.000014 |   4 | Format_desc |         1 |         107 | Server ver: 5.5.31-0ubuntu0.12.04.1-log, Binlog ver: 4                            |
</span><span class='line'>| master-bin.000014 | 107 | Query       |         1 |         174 | BEGIN                                                                             |
</span><span class='line'>| master-bin.000014 | 174 | User var    |         1 |         229 | @&lt;code>foo&lt;/code>=_latin1 0x323031302D31302D30312031323A30303A3030 COLLATE latin1_swedish_ci |
</span><span class='line'>| master-bin.000014 | 229 | Query       |         1 |         321 | use &lt;code>tac&lt;/code>; insert into test values (@foo)                                         |
</span><span class='line'>| master-bin.000014 | 321 | Xid         |         1 |         348 | COMMIT /&lt;em> xid=148 &lt;/em>/                                                              |
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+-----------------------------------------------------------------------------------+
</span><span class='line'>5 rows in set (0.00 sec)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ol>
<li>Password()</li>
</ol>


<p>直接内嵌使用password，会在binlog里暴露密码，就像下面的测试。可以使用user variable,但是不知道user variable的编码保密性如何。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql> insert into test values(password('tac'));
</span><span class='line'>mysql> show binlog events in 'master-bin.000015';
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
</span><span class='line'>| Log_name          | Pos | Event_type  | Server_id | End_log_pos | Info                                                   |
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
</span><span class='line'>| master-bin.000015 |   4 | Format_desc |         1 |         107 | Server ver: 5.5.31-0ubuntu0.12.04.1-log, Binlog ver: 4 |
</span><span class='line'>| master-bin.000015 | 107 | Query       |         1 |         174 | BEGIN                                                  |
</span><span class='line'>| master-bin.000015 | 174 | Query       |         1 |         276 | use &lt;code>tac&lt;/code>; insert into test values(password('tac'))    |
</span><span class='line'>| master-bin.000015 | 276 | Xid         |         1 |         303 | COMMIT /&lt;em> xid=158 &lt;/em>/                                   |
</span><span class='line'>+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
</span><span class='line'>4 rows in set (0.01 sec)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>简单一点学习如上。</p>
]]></content>
  </entry>
  
</feed>
