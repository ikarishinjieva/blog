---
layout: post
title: "推荐下我修改的gen"
date: 2014-03-02 21:29
comments: true
categories:  go gen
---

[`gen`](http://clipperhouse.github.io/gen/)是go的代码生成器, 提供类似于`underscore`的函数集.

尝试将`gen`用在项目上,发现不太方便,对源码做了如下两个修改, 修改后的代码在[这里](https://github.com/ikarishinjieva/gen):

####1. 支持条件编译
go提供了条件编译,根据`GOOS`和`GOARCH`进行交叉编译,也可以利用[`build tags`](http://golang.org/cmd/go)自定义条件编译

修改前可能碰到的问题是存在`a_linux.go`和`a_windows.go`, 分别定义一个函数`A`的两个版本. 调用`gen`时会报错:`A`不可以重复定义

这个修改已经被merge回原分支

####2. 对于import的其它包, 支持分析其源码
设想一个场景, 存在`root/A`和`root/B`两个包, `root/B` import `root/A`

在`root/B`上调用`gen`, `gen`会分析import关系, 找到并分析`root/A`

在修改之前, 由于`gen`只使用了`types.Check`, 默认只会使用`gcimport`,只分析`root/A`编译好的pkg(`.a`文件), 而不包括`root/A`的源码.

也就是说对于所有依赖, 必须都保证其跑过`go install`, 才能在下游模块使用`gen`. 这个并不方便

做的修改是使用`go.tools/importer`代替`gcimporter`, 既可以分析编译好的pkg, 又可以分析源码

不过这个修改的代价是分析的时间会比较长

这个修改尚未被原分支接受

####3. `types`源码分析的一个问题

以下代码在分析源码时报错, 但编译时是通过的

    c := make(chan os.Signal, 1)
    signal.Notify(c, syscall.SIGTTIN)


分析时报的错是

    cannot pass argument c (variable of type chan os.Signal) to parameter of type chan<- os.Signal
    
目前无解, 但结论是用`types`包进行的源码分析结果和编译时的略有差异

